@{
    Layout = "~/Views/Shared/_CreateTournamentLayout.cshtml";
    int tourId = ViewBag.TourId;
    int maxNumberOfTournament = ViewBag.MaxNumberOfTournament;
    int numberOfPlayer = ViewBag.NumberOfPlayer;
    int numberPlayerRecommend = ViewBag.NumberRecommend;
    int knockOutNumber = ViewBag.KnockOutNumber;
}
<div class="tourId d-none">@tourId</div>
<div class="numberOfPlayer d-none">@maxNumberOfTournament</div>
<div class="knockOutNumber d-none">@knockOutNumber</div>
<div class="numberPlayerRecommend d-none">@numberPlayerRecommend</div>
<div class="opened-step d-none">@ViewBag.StepOpen</div>
<div class="current-step d-none">@ViewBag.CurrentStep</div>
<div class="container-full">
    <div class="create-tour d-flex justify-content-end">
        <div class="create-tour-display col-lg-10 py-0">
            <div class="create-step-five">
                <div class="display-title d-flex justify-content-between">
                    <div>Sơ đồ đấu</div>
                    <div class="d-flex align-items-center">
                        <div class="step-two-nav arrange-btn">
                            Sắp xếp
                            <div class="arrange-menu">
                                <a href="@Url.Action("SystemRandom", "CreateTournament", new {tourId = tourId})">Hệ thống ngẫu nhiên</a>
                                <a href="@Url.Action("UserRandom", "CreateTournament", new {tourId = tourId})">Người dùng ngẫu nhiên</a>
                                @*<a href="@Url.Action("UserCustom", "CreateTournament")">Người dùng tùy chỉnh</a>*@
                            </div>
                        </div>
                    </div>
                </div>
                <div class="display-content m-0">
                    <div class="container-bracket mt-0">
                        <div class="bracket-tab">
                            <div class="bracket-content d-flex" style="top:50px">
                                <div id="loser-match-body"></div>
                                <div id="winer-match-body"></div>
                            </div>
                        </div>
                        <div class="zoom-btns">
                            <div class="screen-size">
                                <button class="zoom-in" onclick="fullScreen()">
                                    <i class="fa-solid fa-expand"></i>
                                </button>
                            </div>
                            <div>
                                <button id="zoom-in" class="zoom-in" onclick="zoomIn()">
                                    <i class="fa-solid fa-plus"></i>
                                </button>
                            </div>
                            <div>
                                <button id="zoom-out" class="zoom-out" onclick="zoomOut()">
                                    <i class="fa-solid fa-minus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (numberPlayerRecommend < maxNumberOfTournament)
{
    <div id="first-popup" class="confirm-popup">
        <div class="confirm-content">
            <div class="confirm-title">
                Số người chơi chưa đủ với sơ đồ @maxNumberOfTournament!
            </div>
            <div class="d-flex justify-content-around">
                <div class="exit-btn" style="width: 200px;">
                    Thêm người chơi
                </div>
                <div id="new-bracket-btn" class="save-random" style="width: 200px;">
                    Sử dụng sơ đồ @numberPlayerRecommend
                </div>
            </div>
        </div>
    </div>
}
<div id="second-popup" class="confirm-popup d-none">
    <div class="confirm-content" style="min-height: 500px; width: 900px;">
        <form class="confirm-form">
            <div class="confirm-title m-0">
                Cài đặt lại vòng đấu
            </div>
            <div class="px-3">
                <div class="d-flex">
                    <div class="tour-input-line" hidden>
                        @*Xử lý đấu đơn và đấu kép *@
                        <select class="input-content tour-type">
                            <option value="1" isManyStage="false">Đấu loại đơn</option>
                            <option value="2" isManyStage="true" selected>Đấu loại kép</option>
                        </select>

                    </div>
                    <div class="tour-input">
                        <div class="tour-input-line">
                            <div class="input-title">
                                <span class="input-requir">*</span>
                                <span>Kích thước sơ đồ</span>
                            </div>
                            <!-- disabled -->
                            <input class="input-content size-bracket" value="@numberPlayerRecommend" readonly>
                        </div>
                    </div>
                    <div class="knockout-number tour-input mx-3">
                        <div class="tour-input-line">
                            <div class="input-title">
                                <span class="input-requir">*</span>
                                <span>Số người vào loại trực tiếp</span>
                            </div>
                            <select class="input-content knockout-options" id="knockOutNumber">
                                <option value="2" checked>2</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="race-round row py-3 d-flex justify-content-between d-none">
                    <div class="race-note col-12">(*) Giữ phím Ctrl để chọn/bỏ chọn nhiều ô cùng lúc.</div>
                    <div class="col-12 px-0">
                        <button class="add-group">Chọn toàn bộ</button>
                        <button class="remove-group">Loại bỏ nhóm</button>
                    </div>
                    <div class="col-lg-5">
                        <div class="race-branch">Nhánh thắng:</div>
                        <div class="race-win">
                            <div class="tour-input-line row">
                                <div class="round-name col-lg-6">Vòng 1</div>
                                <div class="col-lg-6">
                                    <input class="race-number" type="text" name="round1">
                                </div>
                            </div>
                            <div class="tour-input-line row">
                                <div class="round-name col-lg-6">Vòng 1</div>
                                <div class="col-lg-6">
                                    <input class="race-number" type="text" name="round1">
                                </div>
                            </div>
                            <div class="tour-input-line row">
                                <div class="round-name col-lg-6">Vòng 1</div>
                                <div class="col-lg-6">
                                    <input class="race-number" type="text" name="round1">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="race-lose-display col-lg-5">
                        <div class="race-branch">Nhánh thua:</div>
                        <div class="race-lose"></div>
                    </div>
                </div>
                <div class="tour-input">
                    <div class="submit-btn" onclick="updateTour()" style="width: 250px;">Lưu và chuyển đến xếp trận</div>
                </div>
            </div>
        </form>
    </div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>

    const winMatchBody = document.getElementById('winer-match-body');
    var width = 250;
    var height = 60;
    var matchDistance = 30;
    var leftRightSpace = 100;
    let numberMatchEachRound = 0;
    let count = 0;
    var winBody = '';
    var imgList;

    // Gán giá trị cho playerNumber và finalSinglePlayer từ dữ liệu nhận được
    var playerNumber = $(".numberOfPlayer").text().trim();
    var finalSinglePlayer = $(".knockOutNumber").text().trim();

    let roundNumber = Math.log2(playerNumber / 2);
    let finalSingleRound = roundNumber - Math.log2(finalSinglePlayer) + 1;

    console.log('playerNumber:', playerNumber);
    console.log('finalSinglePlayer:', finalSinglePlayer);
    for (i = 0; i <= finalSingleRound; i++) {
        numberMatchEachRound = 2 ** (roundNumber - i);
        for (j = 0; j < numberMatchEachRound; j++) {
            if (i == 0) {
                ++count;
                winBody += '<div class="match-box have-data" id="match' + count + '" style=" top:' + (j * 2 * height) + 'px;width: ' + width + 'px; height: ' + height + 'px;">'
                    + '<div class="match-content row">'
                    + '<div class="match-number col-2 p-0 text-center">'
                    + count
                    + '</div>'
                    + '<div class="player-match col-10">'
                    + '<div class="d-flex justify-content-start align-items-center">'
                    + '<img src=""/>'
                    + '<!-- 15 char -->'
                    + '<div class="player-name"></div>'
                    + '<div class="player-id d-none"></div>'
                    + '</div>'
                    + '<div class="d-flex justify-content-start align-items-center">'
                    + '<img src=""/>'
                    + '<!-- 15 char -->'
                    + '<div class="player-name"></div>'
                    + '<div class="player-id d-none"></div>'
                    + '</div>'
                    + '</div>'
                    + '</div>'
                    + '</div>'
            } else {
                ++count;
                winBody +=
                    '<div class="line" style="top: ' + (height * (((2 ** i - 1) / 2) + (2 ** (i + 1) * j))) + 'px; left:' + (width * i + matchDistance * (i - 1)) + 'px">'
                    + '<div class="left-line-win" style="width: ' + matchDistance / 2 + 'px; height: ' + ((2 ** i) * height) + 'px;"></div>'
                    + '<div class="right-line-win" style="width: ' + matchDistance / 2 + 'px; height: ' + ((2 ** i) * height / 2) + 'px;"></div>'
                    + '</div>'
                    + '<div class="match-box" id="match' + count + '" style="top:' + (height * ((2 ** i - 1) + 2 ** (i + 1) * j)) + 'px; left: ' + ((matchDistance + width) * i) + 'px;width: ' + width + 'px; height: ' + height + 'px;">'
                    + '<div class="match-content row">'
                    + '<div class="match-number col-2 p-0 text-center">'
                    + count
                    + '</div>'
                    + '<div class="player-match col-10">'
                    + '<div class="d-flex justify-content-start align-items-center">'
                    + '</div>'
                    + '<div class="d-flex justify-content-start align-items-center">'
                    + '</div>'
                    + '</div>'
                    + '</div>'
                    + '</div>'
            }
        }
    }

    const loseMatchBody = document.getElementById('loser-match-body');
    var loseBody = '';
    for (i = 1; i <= finalSingleRound; i++) {
        numberMatchEachRound = 2 ** (roundNumber - i);
        for (j = 0; j < numberMatchEachRound; j++) {
            ++count;
            loseBody +=
                '<div class="line" style="top: ' + (height * (((2 ** i - 1) / 2) + (2 ** (i + 1) * j))) + 'px; right:' + ((i - 1) * (1.5 * matchDistance + 2 * width)) + 'px">'
                + '<div class="left-line-lose" style="width: ' + matchDistance / 2 + 'px; height: ' + ((2 ** i) * height / 2) + 'px;"></div>'
                + '<div class="right-line-lose" style="width: ' + matchDistance / 2 + 'px; height: ' + ((2 ** i) * height) + 'px;"></div>'
                + '</div>'
                + '<div class="match-box" id="match' + count + '" style="top:' + (height * ((2 ** i - 1) + 2 ** (i + 1) * j)) + 'px; right: ' + ((1.5 * i - 0.5) * matchDistance + 2 * (i - 1) * width) + 'px;width: ' + width + 'px; height: ' + height + 'px;">'
                + '<div class="match-content row">'
                + '<div class="match-number col-2 p-0 text-center">'
                + count
                + '</div>'
                + '<div class="player-match col-10">'
                + '<div class="d-flex justify-content-start align-items-center">'
                + '</div>'
                + '<div class="d-flex justify-content-start align-items-center">'
                + '</div>'
                + '</div>'
                + '</div>'
                + '</div>'
        }
        for (j = 0; j < numberMatchEachRound; j++) {
            ++count;
            loseBody +=
                '<div class="between-line" style="top: ' + (height * (((2 ** i - 1) / 2) + (2 ** (i + 1) * j))) + 'px; right:' + ((1.5 * i - 0.5) * matchDistance + (2 * i - 1) * width) + 'px; width: ' + matchDistance / 2 + 'px; height: ' + ((2 ** i) * height / 2) + 'px;"></div>'
                + '<div class="match-box" id="match' + count + '" style="top: ' + (height * ((2 ** i - 1) + 2 ** (i + 1) * j)) + 'px; right: ' + ((matchDistance * 1.5 * i + width * (2 * i - 1))) + 'px;width: ' + width + 'px; height: ' + height + 'px;">'
                + '<div class="match-content row">'
                + '<div class="match-number col-2 p-0 text-center">'
                + count
                + '</div>'
                + '<div class="player-match col-10">'
                + '<div class="d-flex justify-content-start align-items-center">'
                + '</div>'
                + '<div class="d-flex justify-content-start align-items-center">'
                + '</div>'
                + '</div>'
                + '</div>'
                + '</div>'
        }
    }
    loseMatchBody.innerHTML = loseBody;

    for (i = finalSingleRound; i <= roundNumber; i++) {
        numberMatchEachRound = 2 ** (roundNumber - i);
        if (i === finalSingleRound) {
            for (j = 0; j < numberMatchEachRound; j++) {
                ++count;
                winBody +=
                    '<div class="line" style="top: ' + (height * (((2 ** i - 1) / 2) + (2 ** (i + 1) * j))) + 'px; left:' + (width * (i + 1) + matchDistance * i) + 'px">'
                    + '<div class="right-line-win" style="width: ' + matchDistance / 2 + 'px; height: ' + ((2 ** i) * height / 2) + 'px;"></div>'
                    + '</div>'
                    + '<div class="match-box" id="match' + count + '" style="top:' + (height * ((2 ** i - 1) + 2 ** (i + 1) * j)) + 'px; left: ' + (matchDistance * (i + 0.5) + width * (i + 1)) + 'px;width: ' + width + 'px; height: ' + height + 'px;">'
                    + '<div class="match-content row">'
                    + '<div class="match-number col-2 p-0 text-center">'
                    + count
                    + '</div>'
                    + '<div class="player-match col-10">'
                    + '<div class="d-flex justify-content-start align-items-center">'
                    + '</div>'
                    + '<div class="d-flex justify-content-start align-items-center">'
                    + '</div>'
                    + '</div>'
                    + '</div>'
                    + '</div>'
            }
        } else {
            for (j = 0; j < numberMatchEachRound; j++) {
                ++count;
                winBody +=
                    '<div class="line" style="top: ' + (height * (((2 ** i - 1) / 2) + (2 ** (i + 1) * j))) + 'px; left:' + (width * (i + 1) + matchDistance * (i - 0.5)) + 'px">'
                    + '<div class="left-line-win" style="width: ' + matchDistance / 2 + 'px; height: ' + ((2 ** i) * height) + 'px;"></div>'
                    + '<div class="right-line-win" style="width: ' + matchDistance / 2 + 'px; height: ' + ((2 ** i) * height / 2) + 'px;"></div>'
                    + '</div>'
                    + '<div class="match-box" id="match' + count + '" style="top:' + (height * ((2 ** i - 1) + 2 ** (i + 1) * j)) + 'px; left: ' + (matchDistance * (i + 0.5) + width * (i + 1)) + 'px;width: ' + width + 'px; height: ' + height + 'px;">'
                    + '<div class="match-content row">'
                    + '<div class="match-number col-2 p-0 text-center">'
                    + count
                    + '</div>'
                    + '<div class="player-match col-10">'
                    + '<div class="d-flex justify-content-start align-items-center">'
                    + '</div>'
                    + '<div class="d-flex justify-content-start align-items-center">'
                    + '</div>'
                    + '</div>'
                    + '</div>'
                    + '</div>'
            }
        }
    }

    winMatchBody.innerHTML = winBody;
    imgList = document.querySelector('.bracket-tab').querySelectorAll('img');
    imgList.forEach(img => {
        img.classList.add('d-none');
    });
    const lastMatchHeight = document.getElementById('match' + playerNumber / 2);
    window.addEventListener('load', centerPosition);

    let currentZoom = 0.5;

    let winerWidth;
    let loserWidth;

    const bracketContent = document.querySelector('.bracket-content');
    const bracketTab = document.querySelector('.bracket-tab');
    const zoomInBtn = document.getElementById('zoom-in');
    const zoomOutBtn = document.getElementById('zoom-out');

    zoomInBtn.addEventListener('click', zoomIn);
    zoomOutBtn.addEventListener('click', zoomOut);

    zoomInBtn.removeEventListener
    applyZoom();



    const header = document.querySelector('header');
    const body = document.querySelector('body');
    const screenSize = document.querySelector('.screen-size');
    const playersHeader = document.querySelector('.players-header');
    const systemRandom = document.querySelector('.system-random');
    const randomBtnGroup = document.querySelector('.random-btn-group');
    var fullScreenBtn = document.getElementById('full-screen');
    var miniScreenBtn;

    if (fullScreenBtn !== null) {
        fullScreenBtn.addEventListener('click', fullScreen);
    }


    function centerPosition() {
        bracketTab.scrollLeft = loseMatchBody.offsetWidth - window.innerWidth / 2 + 200;
    }

    function zoomIn() {
        if (currentZoom <= 1.5) {
            currentZoom += 0.1;
            applyZoom();
            zoomOutBtn.style.opacity = '1';
            zoomOutBtn.classList.remove('no-hover');
        } else {
            zoomInBtn.style.opacity = '0.3';
            zoomInBtn.classList.add('no-hover');
        }
    }

    function zoomOut() {
        if (currentZoom >= 0.2) {
            currentZoom -= 0.1;
            applyZoom();
            zoomInBtn.style.opacity = '1';
            zoomInBtn.classList.remove('no-hover');
        } else {
            zoomOutBtn.style.opacity = '0.3';
            zoomOutBtn.classList.add('no-hover');
        }
    }

    function applyZoom() {
        winerWidth = ((roundNumber + 2) * width + (roundNumber + 0.5) * matchDistance) * currentZoom + leftRightSpace;
        loserWidth = (finalSingleRound * (2 * width + 1.5 * matchDistance)) * currentZoom + leftRightSpace;
        winMatchBody.style.width = winerWidth + 'px';
        loseMatchBody.style.width = loserWidth + 'px';
        bracketContent.style.transform = `scale(${currentZoom})`;
        centerPosition();
    }

    function fullScreen() {
        systemRandom.classList.add('full-screen');
        screenSize.innerHTML = '<button id="mini-screen" class="zoom-in">'
            + '<i class="fa-solid fa-compress"></i>'
            + '</button>';
        miniScreenBtn = document.getElementById('mini-screen');
        miniScreenBtn.addEventListener('click', minimized);

        if (body.requestFullscreen) {
            body.requestFullscreen();
        } else if (body.webkitRequestFullscreen) { /* Safari */
            body.webkitRequestFullscreen();
        } else if (body.msRequestFullscreen) { /* IE11 */
            body.msRequestFullscreen();
        }

        header.classList.add('d-none');
        playersHeader.classList.add('d-none');
        randomBtnGroup.classList.add('d-none');
    }

    function minimized() {
        systemRandom.classList.remove('full-screen');
        screenSize.innerHTML = '<button id="full-screen" class="zoom-in">'
            + '<i class="fa-solid fa-expand"></i>'
            + '</button>';
        fullScreenBtn = document.getElementById('full-screen');
        fullScreenBtn.addEventListener('click', fullScreen);

        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.webkitExitFullscreen) { /* Safari */
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) { /* IE11 */
            document.msExitFullscreen();
        }

        header.classList.remove('d-none');
        playersHeader.classList.remove('d-none');
        randomBtnGroup.classList.remove('d-none');
    }

    //Handle display filed
    const tourType = document.querySelector('.tour-type');
    const sizeBracket = document.querySelector('.size-bracket');
    const knockoutNumber = document.querySelector('.knockout-number');
    const knockoutOptions = document.querySelector('.knockout-options');
    const raceRound = document.querySelector('.race-round');
    const raceWin = document.querySelector('.race-win');
    const raceLose = document.querySelector('.race-lose');
    const removeGroupBtn = document.querySelector('.remove-group');
    const addGroupBtn = document.querySelector('.add-group');
    const raceLoseDisplay = document.querySelector('.race-lose-display');

    var isKnockoutOn = false;
    var isTourTypeSelected = true;
    var isSizeBracketSelected = true;
    var selectedOption = tourType.options[tourType.selectedIndex];
    var isManyStageValue = selectedOption.getAttribute('isManyStage');
    knockoutOptions.disabled = true;
    knockoutOptions.disabled = !(isManyStageValue === 'true');
    isKnockoutOn = (isManyStageValue === 'true');
    isTourTypeSelected = true;
    if (isManyStageValue === 'false') {
        knockoutOptions.selectedValue = '2';
    }
    var sizeBracketNum = sizeBracket.value;
    var knockoutHTML = '';

    if (Math.log2(sizeBracketNum) <= 2) {
        knockoutHTML += '<option value="2">2</option>'
    } else {
        for (var i = 1; i < Math.log2(sizeBracketNum); i++) {
            knockoutHTML += '<option value="' + (Math.pow(2, i)) + '">' + (Math.pow(2, i)) + '</option>'
        }
    }
    knockoutOptions.innerHTML = knockoutHTML;

    knockoutOptions.addEventListener('change', raceRoundHandle);

    raceRoundHandle();

    function raceRoundHandle() {
        if (isTourTypeSelected === true && isSizeBracketSelected === true) {
            raceRound.classList.remove('d-none');

            var raceWinHTML = '';
            var winRoundNumber = Math.log2(sizeBracket.value);
            if (isManyStageValue === 'true') {
                winRoundNumber += 1;
            }
            for (var i = 0; i < winRoundNumber; i++) {
                raceWinHTML += '<div class="tour-input-line row">';

                if (i === (winRoundNumber - 1)) {
                    raceWinHTML += '<div class="round-name col-lg-6">CK</div>';
                } else {
                    raceWinHTML += '<div class="round-name col-lg-6">Vòng ' + (i + 1) + '</div>';
                }
                raceWinHTML += '<div class="col-lg-6">'
                    + '<input class="race-number" type="number" value="5" name="round' + (i + 1) + '">'
                    + '</div>'
                    + '</div>';
            }
            raceWin.innerHTML = raceWinHTML;

            if (isManyStageValue === 'true') {
                raceLoseDisplay.classList.remove('d-none');
                var raceLoseHTML = '';
                var loseRoundNumber = 2 * (Math.log2(sizeBracket.value) - Math.log2(knockoutOptions.value));
                console.log(loseRoundNumber, Math.log2(sizeBracket.value), Math.log2(knockoutOptions.value))
                for (var i = 0; i < loseRoundNumber; i++) {
                    raceLoseHTML += '<div class="tour-input-line row">'
                        + '<div class="round-name col-lg-6">Vòng ' + (i + 1) + '</div>'
                        + '<div class="col-lg-6">'
                        + '<input class="race-number" type="number" value="5" name="loseRound' + (i + 1) + '">'
                        + '</div>'
                        + '</div>';
                }
                raceLose.innerHTML = raceLoseHTML;
            } else {
                raceLose.innerHTML = '';
                raceLoseDisplay.classList.add('d-none');
            }
            console.log(isManyStageValue)
            addEventToRaceInput();
        }
    }

    function addEventToRaceInput() {
        const raceInputList = document.querySelectorAll('.race-number');
        raceInputList.forEach((element) => {
            element.addEventListener('click', function (event) {
                if (event.ctrlKey) {
                    this.classList.toggle('multi');
                }
            });
            element.addEventListener('keyup', () => {
                if (element.classList.contains('multi')) {
                    const multiInputList = document.querySelectorAll('.multi');
                    multiInputList.forEach((multiInput) => {
                        multiInput.value = element.value;
                    })
                }
            })
        });
    }

    removeGroupBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const raceInputList = document.querySelectorAll('.race-number');
        raceInputList.forEach((element) => {
            element.classList.remove('multi');
        });
    })

    addGroupBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const raceInputList = document.querySelectorAll('.race-number');
        raceInputList.forEach((element) => {
            element.classList.add('multi');
        });
    })

    function getAndSetRaceNumberString() {
        var raceNumberInputs = document.querySelectorAll('.race-number');
        var raceNumberValues = {};

        raceNumberInputs.forEach(function (input) {
            var roundName = input.getAttribute('name');
            var value = input.value;

            var prefix = roundName.startsWith('round') ? 'W' : 'L';
            if (prefix == 'W') {
                raceNumberValues[roundName] = prefix + roundName.slice(5) + '-' + value;
            }
            else {
                raceNumberValues[roundName] = prefix + roundName.slice(9) + '-' + value;
            }
        });

        var raceNumberString = Object.values(raceNumberValues).join(',');

        return raceNumberString;
    }

    function updateTour() {
        var selectKnockOutNumberElement = document.getElementById("knockOutNumber");

        // lấy giá trị knock-out number
        var knockOutNumber = selectKnockOutNumberElement.value;
        // giá trị của player recommend
        var playerNumber = $(".numberPlayerRecommend").text().trim();
        var tourId = $(".tourId").text().trim();
        var raceToString = getAndSetRaceNumberString();

        // Tạo đối tượng DTO từ các giá trị thu thập được
        var updateDTO = {
            TourId: parseInt(tourId),
            RaceToString: raceToString,
            KnockOutNumberPlayer: parseInt(knockOutNumber),
            MaxPlayerNumber: parseInt(playerNumber)
        };
        console.log(updateDTO);

        $.ajax({
            url: "https://localhost:5000/api/CreateTournament/UpdateBracketStepSix",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(updateDTO),
            success: function (response) {
                var newUrl = "/CreateTournament/StepSixArrange?tourId=" + tourId;
                window.location.href = newUrl;
            },
            error: function (xhr, status, error) {
                console.error("Error updating tournament:", error);
            }
        });
    }

    //open second-popup
    const newBracketBtn = document.getElementById('new-bracket-btn');
    const firstPopup = document.getElementById('first-popup');
    const secondPopup = document.getElementById('second-popup');
    if (newBracketBtn !== null) {
    newBracketBtn.addEventListener('click', () => {
        secondPopup.classList.remove('d-none');
        firstPopup.classList.add('d-none');
    })}

</script>