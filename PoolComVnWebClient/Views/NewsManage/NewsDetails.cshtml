@{
    Layout = "~/Views/Shared/_BackBtnLayout.cshtml";
}
@model PoolComVnWebClient.DTO.NewsDTO;
<script src="https://cdn.ckeditor.com/ckeditor5/41.1.0/classic/ckeditor.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<div class="container">
    <div class="add-news">
        <div class="box-header">Chi tiết bài viết</div>
        <form id="news-form" method="post" asp-controller="NewsManage" asp-action="EditNews" enctype="multipart/form-data">
            <input type="hidden" asp-for="NewsId" value="@Model.NewsId" />
            <input type="hidden" asp-for="CreatedDate" value="@Model.CreatedDate" />
            <input type="hidden" asp-for="UpdatedDate" value="@Model.UpdatedDate" />
            <input type="hidden" asp-for="AccId" value="@Model.AccId" />
            <div class="box-body row py-5 px-5">
                <div class="col-lg-10 px-5 pt-2">
                    <strong class="mt-1">Tiêu đề</strong>
                    <input type="text" class="nameInput mt-1" id="news-title" asp-for="Title" value="@Model.Title" placeholder="Tiêu đề bài viết" />
                    <div class="text-danger nameErr px-2 py-1"></div>
                </div>
                <div class="col-lg-10 px-5 pt-2">
                    <strong class="mt-1">Mô tả chi tiết</strong>
                    <div class="form-group">

                        <textarea asp-for="Description" class="form-control"></textarea>
                    </div>
                    <div class="text-danger descErr px-2 py-1"></div>
                </div>
                <div class="col-lg-10 px-5 pt-2">
                    <strong class="mt-1">Ảnh đại diện</strong>
                    @if (!string.IsNullOrEmpty(Model.Flyer))
                    {
                        <img id="banner-image" src="@Model.Flyer" alt="Current Banner Image" class="img-fluid mt-2" />
                        <a asp-action="DeleteBanner" asp-controller="NewsManage" asp-route-id="@Model.NewsId" class="btn btn-danger mt-2">Xoá ảnh đại diện</a>
                    }
                    else
                    {
                        <img id="banner-image" src="" style="width: 150px; height: 150px; object-fit: cover;" alt="Ảnh đại diện ở đây" />
                        <input type="file" accept="image/*" id="banner" name="BannerFile" onchange="displaySelectedImage(event, 'banner-image')" />
                        <div class="text-danger bannerErr px-2 py-1"></div>
                    }
                    <div class="text-danger bannerErr px-2 py-1"></div>
                </div>
                <div class="col-lg-10 px-5 pt-2">
                    <label for="statusToggle">Trạng thái</label>
                    <div class="form-check form-switch">
                        <input type="hidden" name="Status" value="false" />
                        <input type="checkbox" class="form-check-input" id="statusToggle" name="Status" @(Model.Status.HasValue && Model.Status.Value ? "checked" : "") onchange="changeStatus()" />
                    </div>
                </div>

                <div class="col-lg-6 px-5 pt-5 d-flex justify-content-around">
                    <button type="submit" class="btn btn-success">Chỉnh sửa</button>
                    <a asp-action="Index" asp-controller="NewsManage" class="btn btn-danger">HỦY</a>
                </div>
                <div class="col-lg-6 px-5 pt-5" id="form-message"></div>
            </div>
        </form>
    </div>
</div>
<script>
    const backBtn = document.querySelector('.back-btn');
    if (backBtn !== null) {
        backBtn.addEventListener('click', () => {
            window.location.href = document.referrer;
        });
    }

    class MyUploadAdapter {
        constructor(loader) {
            this.loader = loader;
        }

        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();
            xhr.open('POST', '@Url.Action("UploadImage","NewsManage")', true);
            xhr.responseType = 'json';
        }
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }
                resolve({
                    default: response.url
                });
            });
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }
        _sendRequest(file) {

            const data = new FormData();

            data.append('upload', file);
            this.xhr.send(data);
        }

    }
    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {

            return new MyUploadAdapter(loader);
        };
    }
    ClassicEditor
        .create(document.querySelector('#Description'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
        .catch(error => {
            console.log(error);
        });
    function changeStatus() {
        var statusToggle = document.getElementById('statusToggle');
        var statusLabel = document.querySelector('.form-check-label');
        statusToggle.previousElementSibling.value = statusToggle.checked ? "true" : "false";
    }

    function displaySelectedImage(event, elementId) {
        const selectedImage = document.getElementById(elementId);
        const fileInput = event.target;

        if (fileInput.files && fileInput.files[0]) {
            const reader = new FileReader();

            reader.onload = function (e) {
                selectedImage.src = e.target.result;
            };

            reader.readAsDataURL(fileInput.files[0]);
        }
    }

</script>

